local args = {...}
_G.OSoDE = {
  version = "beta 3",
}

local function log(...)
  print("[OSoDE] ",...)
  sleep(0)
end

local function logError(...)
  printError("[OSoDE] ",...)
  sleep(0)
end

if #args > 0 then
  OSoDE.path = args[1]
else
  print("Usage: OSoDE <directory>")
  return
end

log("OSoDE by Ale32bit")
log("VFS by MultMine")
log("Starting OSoDE "..OSoDE.version.."...")

if not fs.exists("/vfs") then
  local vfs = fs.open("/vfs","w")
  local source = http.get("https://raw.github.com/MultHub/Aurora/master/aurorasrc/vfs")
  vfs.write(source.readAll())
  vfs.close()
  source.close()
  log("Installed VFS")
end

if fs.exists(OSoDE.path) and fs.isDir(OSoDE.path) then
  if fs.exists(OSoDE.path.."/OSoDE") then
    dofile(OSoDE.path.."/OSoDE")
    OSoDE.name = name
    OSoDE.boot = start
    log("Starting Up " ..OSoDE.name)
  else
    log("No medium found")
    return
  end
else
  log("No medium found")
  return
end

if not fs.exists(OSoDE.path.."/data") then
  if fs.isDir(OSoDE.path.."/data") then
    fs.delete(OSoDE.path.."/data")
  end
  fs.makeDir(OSoDE.path.."/data")
end

if not fs.exists(OSoDE.path.."/data/rom") then
  fs.copy("/rom",OSoDE.path.."/data/rom")
end

sleep(1)

local oldShutdown = os.shutdown
local oldReboot = os.reboot
local oldShell = shell

function os.shutdown()
  return
end

function os.reboot()
  return
end

shell = nil

dofile("/vfs")

local f = fs.open(OSoDE.path.."/data/rom/programs/shell","r")
local script = f.readAll()
f.close()

fs.setRoot(fs.redirectProxy(fs.native(),OSoDE.path.."/data"))

local fsNative = fs.native()
_G.fs.native = nil

term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)
term.clear()
term.setCursorPos(1,1)

local ok, err = pcall(function()
  setfenv(loadstring(script),getfenv())()
end)
term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)
term.clear()
term.setCursorPos(1,1)
_G.fs = fsNative
if not ok then
  log(OSoDE.name.." crashed")
  logError(err)
  log("Tip: Reboot computer and restart OSoDE")
end
os.shutdown = oldShutdown
os.reboot = oldReboot
shell = oldShell

log(OSoDE.name.." terminated")
